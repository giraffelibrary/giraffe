#! /bin/sh

CODEGEN_REL_DIR=$(dirname "$0")
CODEGEN_DIR=$(cd "${CODEGEN_REL_DIR}" || exit ; pwd -P)

AUTO_TYPELIB="auto-typelib"
AUTO_GIR="auto-gir"
FIXES_GIR="fixes-gir"
EXTRA_GIR="extra-gir"
FIXED_GIR="fixed-gir"
RELEASE_SRC="release/src"

TMP_DIR="/tmp"
AUTO_GIR_OUT_DIR="${TMP_DIR}/${AUTO_GIR}"
AUTO_TYPELIB_OUT_DIR="${TMP_DIR}/${AUTO_TYPELIB}"
FIXED_GIR_OUT_DIR="${TMP_DIR}/${FIXED_GIR}"

try_merge_tool () {
  SOURCE_DIR="$1"
  TARGET_DIR="$2"

  if [ -z "${MERGE}" ]
  then
    echo
    echo "Environment variable MERGE not set; no merge tool available."
  else
    if [ ! -x "${MERGE}" ]
    then
      echo
      echo "Environment variable MERGE does not specify an executable file."
    else
      while true
      do
        printf "Run merge tool? [y/N] "
        read -r ANSWER
        if [ "x${ANSWER}" = "xy" ] || [ "x${ANSWER}" = "xY" ]
        then
          echo "Running ${MERGE} ${SOURCE_DIR} ${TARGET_DIR}"
          "${MERGE}" "${SOURCE_DIR}" "${TARGET_DIR}"
          break
        elif [ "x${ANSWER}" = "xn" ] || [ "x${ANSWER}" = "xN" ] || [ "x${ANSWER}" = "x" ]
        then
          break
        fi
      done
    fi
  fi
}

update () {
  INDENT="  "
  DIFF_EXISTS=
  SOURCE_DIR="$1"
  TARGET_DIR="$2"

  if [ ! -d "${SOURCE_DIR}" ]
  then
    echo "Error: source directory ${SOURCE_DIR} does not exist"
    exit 1
  fi

  if [ ! -d "${TARGET_DIR}" ]
  then
    echo "Error: target directory ${TARGET_DIR} does not exist"
    exit 1
  fi

  SOURCE_NAME_LEN_MAX=$((1 + ${#SOURCE_DIR}))
  for SOURCE in "${SOURCE_DIR}"/*-*
  do
    NAME=$(basename "${SOURCE}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${SOURCE_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      SOURCE_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  TARGET_NAME_LEN_MAX=${SOURCE_NAME_LEN_MAX}
  for TARGET in "${TARGET_DIR}"/*-*
  do
    NAME=$(basename "${TARGET}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${TARGET_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      TARGET_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  FMT="  %-${SOURCE_NAME_LEN_MAX}s  %-12s  %-${TARGET_NAME_LEN_MAX}s"

  # shellcheck disable=SC2059
  printf "${FMT}\n" "${SOURCE_DIR}/" "------->" "${TARGET_DIR}/"

  MATCHES=$(find "${SOURCE_DIR}" -maxdepth 1 -name '*-*' -print -quit)
  if [ -n "${MATCHES}" ]
  then
    for SOURCE in "${SOURCE_DIR}"/*-*
    do
      NAME=$(basename "${SOURCE}")
      TARGET="${TARGET_DIR}/${NAME}"

      if [ -e "${TARGET}" ]
      then
        if diff -rq "${TARGET}" "${SOURCE}" > /dev/null
        then
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "same as" "${INDENT}${NAME}"
        else
          # shellcheck disable=SC2059
          printf "${FMT}  %-22s\n" "${INDENT}${NAME}" "differs from" "${INDENT}${NAME}" "(manual update required)"
          DIFF_EXISTS=1
        fi
      else
        if cp -an "${SOURCE}" "${TARGET}"
        then
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "copied to" "${INDENT}${NAME}"
        else
          echo "error: failed to copy ${SOURCE} to ${TARGET}"
        fi
      fi
    done
  fi

  MATCHES=$(find "${TARGET_DIR}" -maxdepth 1 -name '*-*' -print -quit)
  if [ -n "${MATCHES}" ]
  then
    for TARGET in "${TARGET_DIR}"/*-*
    do
      NAME=$(basename "${TARGET}")
      SOURCE="${SOURCE_DIR}/${NAME}"

      if [ ! -e "${SOURCE}" ]
      then
        # shellcheck disable=SC2059
        printf "${FMT}  %-22s\n" "${INDENT}<>" "differs from" "${INDENT}${NAME}" "(manual delete required)"
        DIFF_EXISTS=1
      fi
    done
  fi

  if [ -n "${DIFF_EXISTS}" ]
  then
    echo
    echo "Differences exist; manual update required."
    try_merge_tool "${SOURCE_DIR}" "${TARGET_DIR}"
  fi
}


################################################################################
# Process arguments

GIR=
TYPELIB=
MERGE_GIR=
MERGE_TYPELIB=
FIXED=
MERGE_FIXED=
MERGE_SOURCE=
REMOVE_SOURCE=
SHOW_HELP=

if [ $# != 0 ]
then
  while [ $# != 0 ]
  do
    case "$1" in
    gir)
      GIR=1
      shift
      ;;
    update-gir)
      MERGE_GIR=1
      shift
      ;;
    typelib)
      TYPELIB=1
      shift
      ;;
    update-typelib)
      MERGE_TYPELIB=1
      shift
      ;;
    fixed)
      FIXED=1
      shift
      ;;
    update-fixed)
      MERGE_FIXED=1
      shift
      ;;
    update-source)
      MERGE_SOURCE=1
      shift
      ;;
    remove-source)
      REMOVE_SOURCE=1
      shift
      ;;
    help)
      SHOW_HELP=${SHOW_HELP:-0}
      shift
      ;;
    *)
      echo "error: unrecognized command \"$1\""
      SHOW_HELP=1
      shift
      ;;
    esac
  done
else
  echo "error: no command specified"
  SHOW_HELP=1
fi


if [ -n "${SHOW_HELP}" ]
then
  cat << EOF

Usage: $0 COMMAND

Commands
  gir               generate code from GIR files [${AUTO_GIR_OUT_DIR}]
  update-gir        update working directory [${CODEGEN_REL_DIR}/${AUTO_GIR}]

  typelib           generate code from TYPELIB files [${AUTO_TYPELIB_OUT_DIR}]
  update-typelib    update working directory [${CODEGEN_REL_DIR}/${AUTO_TYPELIB}]

  fixed             fix code (generated from GIR files) [${FIXED_GIR_OUT_DIR}]
  update-fixed      update working directory [${CODEGEN_REL_DIR}/${FIXED_GIR}]

  update-source     update source directory with fixed code [${CODEGEN_REL_DIR}/${RELEASE_SRC}]
  remove-source     remove fixed code from source directory [${CODEGEN_REL_DIR}/${RELEASE_SRC}]

  help              show this help

EOF
  exit ${SHOW_HELP}
fi


################################################################################
# 

# gir

if [ -n "${GIR}" ]
then
  (
    cd src &&
    OUT_DIR="${AUTO_GIR_OUT_DIR}" \
    VERSION_DIR="${CODEGEN_DIR}/version" \
    GIVERSION_DIR="${CODEGEN_DIR}/giversion" \
    GIMETADATA_DIR="${CODEGEN_DIR}/gimetadata" \
    poly -q --error-exit \
     < "codegen-gir.sml"
  )
fi


# typelib

if [ -z "${KERNEL_NAME}" ]
then
  KERNEL_NAME=$(uname -s)
fi

if [ -n "${TYPELIB}" ]
then
  (
    cd src &&
    for n in 1 2
    do
      if [ "${KERNEL_NAME}" = "Darwin" ]
      then
        DYLD_FORCE_FLAT_NAMESPACE=1 \
        DYLD_INSERT_LIBRARIES="${CODEGEN_DIR}/${RELEASE_SRC}/polyml/libgiraffe-girepository-2.0.dylib" \
        OUT_DIR="${AUTO_TYPELIB_OUT_DIR}" \
        VERSION_DIR="${CODEGEN_DIR}/version" \
        GIVERSION_DIR="${CODEGEN_DIR}/giversion" \
        GIMETADATA_DIR="${CODEGEN_DIR}/gimetadata" \
        poly -q --error-exit \
         < "codegen-typelib-${n}.sml"
      else
        LD_PRELOAD="${CODEGEN_DIR}/${RELEASE_SRC}/polyml/libgiraffe-girepository-2.0.so" \
        OUT_DIR="${AUTO_TYPELIB_OUT_DIR}" \
        VERSION_DIR="${CODEGEN_DIR}/version" \
        GIVERSION_DIR="${CODEGEN_DIR}/giversion" \
        GIMETADATA_DIR="${CODEGEN_DIR}/gimetadata" \
        poly -q --error-exit \
         < "codegen-typelib-${n}.sml"
      fi
    done
  )
fi


# update-gir

if [ -n "${MERGE_GIR}" ]
then
  if [ ! -d "${CODEGEN_REL_DIR}/${AUTO_GIR}" ]
  then
    echo "Creating ${CODEGEN_REL_DIR}/${AUTO_GIR}"
    mkdir "${CODEGEN_REL_DIR}/${AUTO_GIR}"
  fi
  update "${AUTO_GIR_OUT_DIR}" "${CODEGEN_REL_DIR}/${AUTO_GIR}"
fi


# update-typelib

if [ -n "${MERGE_TYPELIB}" ]
then
  if [ ! -d "${CODEGEN_REL_DIR}/${AUTO_TYPELIB}" ]
  then
    echo "Creating ${CODEGEN_REL_DIR}/${AUTO_TYPELIB}"
    mkdir "${CODEGEN_REL_DIR}/${AUTO_TYPELIB}"
  fi
  update "${AUTO_TYPELIB_OUT_DIR}" "${CODEGEN_REL_DIR}/${AUTO_TYPELIB}"
fi


# fixed

if [ -n "${FIXED}" ]
then
  if [ -e "${FIXED_GIR_OUT_DIR}" ]
  then
    LAST=1
    for i in "${TMP_DIR}"/*
    do
      N=$(echo "$i" | sed -n -e "s|^${TMP_DIR}/${FIXED_GIR}\.\([0-9][0-9]*\).*$|\1|p")
      if [ -n "${N}" ]
      then
        if [ ${LAST} -lt "${N}" ]
        then
          LAST="${N}"
        fi
      fi
    done
    N=$((LAST + 1))
    NEW_DIR="${FIXED_GIR_OUT_DIR}.${N}"
    echo "Renaming existing output directory ${FIXED_GIR_OUT_DIR} to ${NEW_DIR}"
    if ! mv "${FIXED_GIR_OUT_DIR}" "${NEW_DIR}"
    then
      echo "Failed to rename existing output directory ${FIXED_GIR_OUT_DIR} to ${NEW_DIR}"
      exit 4
    fi
  fi

  echo "Creating ${FIXED_GIR_OUT_DIR}"
  mkdir "${FIXED_GIR_OUT_DIR}"

  echo "Copying ${AUTO_GIR} to ${FIXED_GIR_OUT_DIR}"
  cp -a "${CODEGEN_REL_DIR}/${AUTO_GIR}"/* "${FIXED_GIR_OUT_DIR}"

  echo "Copying ${FIXES_GIR} to ${FIXED_GIR_OUT_DIR}"
  cp -a "${CODEGEN_REL_DIR}/${FIXES_GIR}"/* "${FIXED_GIR_OUT_DIR}"

  echo "Removing files with a variant from ${FIXED_GIR_OUT_DIR}"
  find "${FIXED_GIR_OUT_DIR}" -type f -name '*.default' -exec sh -c 'for f in "$@" ; do rm -f "${f%.default}" ; done' sh {} +

  echo "Copying ${EXTRA_GIR} to ${FIXED_GIR_OUT_DIR}"
  cp -a "${CODEGEN_REL_DIR}/${EXTRA_GIR}"/* "${FIXED_GIR_OUT_DIR}"

  echo "Copying version files to ${FIXED_GIR_OUT_DIR}"
  for dir in version/*
  do
    namespace=$(basename "${dir}")
    if [ -d "${FIXED_GIR_OUT_DIR}/${namespace}" ]
    then
      cp -a "${dir}" "${FIXED_GIR_OUT_DIR}"
    fi
  done
fi


# update-fixed

if [ -n "${MERGE_FIXED}" ]
then
  if [ ! -d "${CODEGEN_REL_DIR}/${FIXED_GIR}" ]
  then
    echo "Creating ${CODEGEN_REL_DIR}/${FIXED_GIR}"
    mkdir "${CODEGEN_REL_DIR}/${FIXED_GIR}"
  fi
  update "${FIXED_GIR_OUT_DIR}" "${CODEGEN_REL_DIR}/${FIXED_GIR}"
fi


# update-source

if [ -n "${MERGE_SOURCE}" ]
then
  update "${CODEGEN_REL_DIR}/${FIXED_GIR}" "${CODEGEN_REL_DIR}/${RELEASE_SRC}"
fi


# remove-source

if [ -n "${REMOVE_SOURCE}" ]
then
  # the following code is a variation on update ()
  INDENT="  "
  DIFF_EXISTS=
  SOURCE_DIR="${CODEGEN_REL_DIR}/${FIXED_GIR}"
  TARGET_DIR="${CODEGEN_REL_DIR}/${RELEASE_SRC}"

  if [ ! -d "${SOURCE_DIR}" ]
  then
    echo "Error: source directory ${SOURCE_DIR} does not exist"
    exit 1
  fi

  if [ ! -d "${TARGET_DIR}" ]
  then
    echo "Error: target directory ${TARGET_DIR} does not exist"
    exit 1
  fi

  SOURCE_NAME_LEN_MAX=$((1 + ${#SOURCE_DIR}))
  for SOURCE in "${SOURCE_DIR}"/*-*
  do
    NAME=$(basename "${SOURCE}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${SOURCE_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      SOURCE_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  TARGET_NAME_LEN_MAX=$((1 + ${#TARGET_DIR}))
  for TARGET in "${TARGET_DIR}"/*-*
  do
    NAME=$(basename "${TARGET}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${TARGET_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      TARGET_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  FMT="  %-${TARGET_NAME_LEN_MAX}s  %-16s  %-${SOURCE_NAME_LEN_MAX}s"

  MATCHES=$(find "${TARGET_DIR}" -maxdepth 1 -name '*-*' -print -quit)
  if [ -n "${MATCHES}" ]
  then
    # shellcheck disable=SC2059
    printf "${FMT}\n" "${TARGET_DIR}/" "" "${SOURCE_DIR}/"

    for TARGET in "${TARGET_DIR}"/*-*
    do
      NAME=$(basename "${TARGET}")
      SOURCE="${SOURCE_DIR}/${NAME}"

      if [ -e "${SOURCE}" ]
      then
        if diff -rq "${TARGET}" "${SOURCE}" > /dev/null
        then
          rm -r "${TARGET}"
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "deleted, same as" "${INDENT}${NAME}"
        else
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "not deleted, differs from" "${INDENT}${NAME}"
          DIFF_EXISTS=1
        fi
      else
        # shellcheck disable=SC2059
        printf "${FMT} %-14s\n" "${INDENT}${NAME}" "not deleted" "${INDENT}${NAME}" "does not exist"
      fi
    done
  fi

  if [ -n "${DIFF_EXISTS}" ]
  then
    echo
    echo "Differences found; manual delete required."
    try_merge_tool "${SOURCE_DIR}" "${TARGET_DIR}"
  fi
fi
