=Signal=

Context

  repo
    the repository in use

  containerInfo
    typelib info of the (interface or object) container of the signal

  signalInfo
    typelib info of the signal

Placeholders

  ContainerName = GIBaseInfo.getName containerInfo

  ContainerNamespace = GIBaseInfo.getNamespace containerInfo

  SignalName = GIBaseInfo.getName signalInfo

  SignalNamespace = GIBaseInfo.getNamespace signalInfo

  SignalFlags = GISignalInfo.getFlags signalInfo


==Specification==

For
  L non-VOID non-length IN/INOUT parameters excluding the object instance,
  K non-VOID non-length INOUT/OUT parameters,
SignalSpec has the form:


  val <signalName>Sig :
    (<var> class, <handlerType>, <emitterType>) <Signal>


where


  Signal
    is defined as follows:

      Signal.t
        if belowGObject

      signal_t
        if isGObject


  var is a fresh type variable


  handlerType
    is defined as follows:

      <argType(true)> -> <resType(false)>
        if L > 0

      <resType(false)>
        if L = 0


  emitterType
    is defined as follows:

      <argType(false)> -> <resType(true)>
        if L > 0

      <resType(true)>
        if L = 0


  argType(isRead)
    is defined as follows:

      <inParamType[1](isRead)> * ... * <inParamType[L](isRead)>
        if L > 0

      unit
        if L = 0


  resType(isRead)
    is defined as follows:


        retTypeInfo = GICallableInfo.getReturnType signalInfo
        tag         = GITypeInfo.getTag retTypeInfo

          K > 0   tag      | resType(isRead)
        ===================+===================================================================
          true    VOID     | <outParamType[1](isRead)> * ... * <outParamType[K](isRead)>
        -------------------+-------------------------------------------------------------------
          true    _        | <retValType(isRead)>
                           |   * <outParamType[1](isRead)> * ... * <outParamType[K](isRead)>
        -------------------+-------------------------------------------------------------------
          false   VOID     | unit
        -------------------+-------------------------------------------------------------------
          false   _        | <retValType(isRead)>
        -------------------+-------------------------------------------------------------------


  inParamType[l](isRead)
    for l in 1 to L, is the SML type representing the
    <l>th parameter type in the list of non-VOID IN/INOUT parameter
    types of the signal translated as follows:

      mayBeNull = GIArgInfo.mayBeNull argInfo

        mayBeNull        | inParamType[l](isRead)
      ===================+===========================
        false            | <type(isRead)>
      -------------------+---------------------------
        true             | <type(isRead)> option
      -------------------+---------------------------


  outParamType[k](isRead)
    for k in 1 to K, is the SML type representing the
    <k>th parameter type in the list of non-VOID INOUT/OUT
    parameter types of the signal translated as follows:

      mayBeNull = GIArgInfo.mayBeNull argInfo

        mayBeNull        | outParamType[k](isRead)
      ===================+===========================
        false [#1]       | <type(isRead)>
      -------------------+---------------------------
        true [#1]        | <type(isRead)> option
      -------------------+---------------------------

      #1: currently for out and in-out parameters, mayBeNull indicates
      whether a null reference argument is allowed, rather than a non-null
      reference to null.   This allows the parameter to be optional thus
      provides what one would have expected from isOptional.
      (isOptional itself appears to always return false.)  Thus there
      is no mechanism to know whether an out parameter that is a pointer
      can have a null out value.  Similarly for an in-out parameter, there
      is no way to know whether the in value or out value can be null.
      Furthermore, an in-out parameter would require two atttibutes:
      allow-none-in and allow-none-out.

      For now, for out and in-out parameters, we do not distinguish
      optionally-null and non-null values.  The conversions OUTPTR and
      INOUTPTR do not have their phantom type constrained.  (We still
      need to know this missing information for the high-level interface
      to determine whether to use an optional type.)


  retValType(isRead)
    is the SML type representing the return type of the signal
    translated as follows:


        mayReturnNull = GICallableInfo.mayReturnNull signalInfo

          mayReturnNull    | retValType(isRead)
        ===================+===========================
          false            | <type(isRead)>
        -------------------+---------------------------
          true             | <type(isRead)> option
        -------------------+---------------------------


  type(isRead)
    is the SML type representation derived from a GITypeInfo provided by
    GIArgInfo.getType and GICallableInfo.getReturnType for a parameter type
    and return type respectively.

    type is translated according to the GIR type tag as follows:

      Conversion from GIR type tags to SML types is as follows:

        ERROR     --->    <raise Error "not expected">
        INT8      --->    <raise Error "no corresponding GType for INT8">
        UINT8     --->    <raise Error "no corresponding GType for UINT8">
        INT16     --->    <raise Error "no corresponding GType for INT16">
        UINT16    --->    <raise Error "no corresponding GType for UINT16">
        GTYPE     --->    <raise Error "not supported">
        FILENAME  --->    <raise Error "not supported">
        ARRAY     --->    <raise Error "not supported">
        GLIST     --->    <raise Error "not supported">
        GSLIST    --->    <raise Error "not supported">
        GHASH     --->    <raise Error "not supported">
        VOID      --->    unit
        BOOLEAN   --->    bool
        INT32     --->    LargeInt.int
        UINT32    --->    LargeInt.int
        INT64     --->    LargeInt.int
        UINT64    --->    LargeInt.int
        FLOAT     --->    real
        DOUBLE    --->    real
        UTF8      --->    string
        UNICHAR   --->    char

        INTERFACE --->

          InterfaceName = GIBaseInfo.getName typeInfo
          InterfaceNamespace = GIBaseInfo.getNamespace typeInfo
          InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

          isSelf = InterfaceName = ContainerName
          isGlobal = InterfaceNamespace <> ContainerNamespace

            <var> <InterfaceNamespace>.<InterfaceName>Class.class
              if isGlobal and isClass

            <InterfaceNamespace>.<InterfaceName>Record.t
              if isGlobal and isRecord

            <var> <InterfaceNamespace>.<InterfaceName>.union
              if isGlobal and isUnion

            <InterfaceNamespace>.<InterfaceName>.t
              if isGlobal and isOther


            <var> <interface_name>_class
              if not isGlobal and not isSelf and isClass

            <interface_name>_t
              if not isGlobal and not isSelf and isRecord

            <var> <interface_name>_union
              if not isGlobal and not isSelf and isUnion

            <interface_name>_t
              if not isGlobal and not isSelf and isOther


            <var> class
              if not isGlobal and isSelf and isClass

            t
              if not isGlobal and isSelf and isRecord

            <var> union
              if not isGlobal and isSelf and isUnion

            t
              if not isGlobal and isSelf and isOther

          where

            var is

              a fresh type variable
                if not isRead

              base
                if isRead


==Declaration==

For
  J non-VOID IN/INOUT parameters excluding the object instance,
  K non-VOID non-length INOUT/OUT parameters,
  L non-VOID non-length IN/INOUT parameters excluding the object instance,
  N non-VOID INOUT/OUT parameters,
where a length parameter is one that provides the length of an array in another parameter
or the return value, SignalDec has a form as described below.

We also treat J, K, L and N as arrays whose elements are the parameter index in the
full list of parameters.  Each array is injective (i.e. elements are unique) and the
inverse of an array X is denoted X~.


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       &&&> <inParamFun[1]> &&&> ... &&&> <inParamFun[J]>
       ---> <outParamFun[1]> &&& ... &&& <outParamFun[N]> &&& <retFun>

    fun hConv f (self & <inParamNameJ[1]> & ... & <inParamNameJ[J]>) =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self) (<inParamExpL[1]>, ..., <inParamExpL[L]>)
      in
        <outParamExpN[1]> & ... & <outParamExpN[N]> & <retValExp>
      end

    fun eConv f self (<inParamNameL[1]>, ..., <inParamNameL[L]>) =
      let
        val <outParamNameN[1]> & ... & <outParamNameN[N]> & <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self & <inParamExpJ[1]> & ... & <inParamExpJ[J]>)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if L > 0 and N > 0  (which implies J > 0 because L <= J)


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       &&&> <inParamFun[1]> &&&> ... &&&> <inParamFun[J]>
       ---> <outParamFun[1]> &&& ... &&& <outParamFun[N]> &&& <retFun>

    fun hConv f (self & <inParamNameJ[1]> & ... & <inParamNameJ[J]>) =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self)
      in
        <outParamExpN[1]> & ... & <outParamExpN[N]> & <retValExp>
      end

    fun eConv f self =
      let
        val <outParamNameN[1]> & ... & <outParamNameN[N]> & <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self & <inParamExpJ[1]> & ... & <inParamExpJ[J]>)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if J > 0 and L = 0 and N > 0  (which implies J > 0 because L <= J)


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       ---> <outParamFun[1]> &&& ... &&& <outParamFun[N]> &&& <retFun>

    fun hConv f self =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self)
      in
        <outParamExpN[1]> & ... & <outParamExpN[N]> & <retValExp>
      end

    fun eConv f self =
      let
        val <outParamNameN[1]> & ... & <outParamNameN[N]> & <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if J = 0 and N > 0  (which implies L = 0 because L <= J)


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       &&&> <inParamFun[1]> &&&> ... &&&> <inParamFun[J]>
       ---> <retFun>

    fun hConv f (self & <inParamNameJ[1]> & ... & <inParamNameJ[J]>) =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self) (<inParamExpL[1]>, ..., <inParamExpL[L]>)
      in
        <retValExp>
      end

    fun eConv f self (<inParamNameL[1]>, ..., <inParamNameL[L]>) =
      let
        val <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self & <inParamExpJ[1]> & ... & <inParamExpJ[J]>)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if L > 0 and N = 0  (which implies J > 0 and K = 0 because L <= J and K <= N)


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       &&&> <inParamFun[1]> &&&> ... &&&> <inParamFun[J]>
       ---> <retFun>

    fun hConv f (self & <inParamNameJ[1]> & ... & <inParamNameJ[J]>) =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self)
      in
        <retValExp>
      end

    fun eConv f self =
      let
        val <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self & <inParamExpJ[1]> & ... & <inParamExpJ[J]>)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if J > 0 and L = 0 and N = 0  (which implies K = 0 because K <= N)


  local
    val marshaller =
      parInst <ContainerNamespace><ContainerName>Class.t
       ---> <retFun>

    fun hConv f self =
      let
        val <resPat> =
          f (GObjectObjectClass.toBase self)
      in
        <retValExp>
      end

    fun eConv f self =
      let
        val <retValPat> =
          f (<ContainerNamespace><ContainerName>Class.toBase self)
      in
        <resExp>
      end
  in
    val <signalName>Sig =
      {
        name = "<signal-name>",
        detail = "",
        marshaller =
          fn () =>
            {
              h = makeCallback marshaller o hConv,
              e = eConv o call marshaller
            }
      }
  end

    if J = 0 and N = 0  (which implies L = 0 and K = 0 because L <= J and K <= N)


where


  resPat
    is defined as follows:


        retTypeInfo = GICallableInfo.getReturnType signalInfo
        tag         = GITypeInfo.getTag retTypeInfo

          K > 0   tag      | resPat
        ===================+===================================================
          true    VOID     | (<outParamNameK[1]>, ..., <outParamNameK[K]>)
        -------------------+---------------------------------------------------
          true    _        | (retVal, <outParamNameK[1]>, ..., <outParamNameK[K]>)
        -------------------+---------------------------------------------------
          false   VOID     | ()
        -------------------+---------------------------------------------------
          false   _        | retVal
        -------------------+---------------------------------------------------


  resExp
    is defined as follows:


        retTypeInfo = GICallableInfo.getReturnType signalInfo
        tag         = GITypeInfo.getTag retTypeInfo

          K > 0   tag      | resExp
        ===================+===================================================
          true    VOID     | (<outParamExpK[1]>, ..., <outParamExpK[K]>)
        -------------------+---------------------------------------------------
          true    _        | (<retValExpK>, <outParamExpK[1]>, ..., <outParamExpK[K]>)
        -------------------+---------------------------------------------------
          false   VOID     | ()
        -------------------+---------------------------------------------------
          false   _        | <retValExpK>
        -------------------+---------------------------------------------------

  outParamExpK[k]
    is defined as follows:

      <outParamNameK[k]> <outParamArrayLenExp>

    where

      inParamArrayLenExp is defined as follows:

        argTypeInfo = GIRepository.ArgInfo.getType argInfo
        arrayLength = GIRepository.TypeInfo.getArrayLength argTypeInfo

        Conversion from arrayLength is as follows:

          NONE                     --->     <empty>
          SOME ZeroTerminated      --->     <empty>
          SOME (LengthFixed n)     --->     <n>
          SOME (LengthParam i)     --->     (LargeInt.toInt <paramName[i]>)


  retValExpK
    is defined as follows:

      retVal <retValArrayLenExp>

    where

      retValArrayLenExp is defined as follows:

        retTypeInfo = GICallableInfo.getReturnType signalInfo
        arrayLength = GIRepository.TypeInfo.getArrayLength retTypeInfo

        Conversion from arrayLength is as follows:

          NONE                     --->     <empty>
          SOME ZeroTerminated      --->     <empty>
          SOME (LengthFixed n)     --->     <n>
          SOME (LengthParam i)     --->     (LargeInt.toInt <paramName[i]>)


  inParamExpL[l]
    is defined as follows:

      <inParamNameL[l]> <inParamArrayLenExp>

    where

      inParamArrayLenExp is defined as follows:

        argTypeInfo = GIRepository.ArgInfo.getType argInfo
        arrayLength = GIRepository.TypeInfo.getArrayLength argTypeInfo

        Conversion from arrayLength is as follows:

          NONE                     --->     <empty>
          SOME ZeroTerminated      --->     <empty>
          SOME (LengthFixed n)     --->     <n>
          SOME (LengthParam i)     --->     (LargeInt.toInt <paramName[i]>)


  retValPat
    is defined as follows:


        retTypeInfo = GICallableInfo.getReturnType signalInfo
        tag         = GITypeInfo.getTag retTypeInfo

          tag             | retValPat
        ==================+===================
          VOID            | ()
        ------------------+-------------------
          _               | retVal
        ------------------+-------------------


  retValExp
    is defined as follows:


        retTypeInfo = GICallableInfo.getReturnType signalInfo
        tag         = GITypeInfo.getTag retTypeInfo

          tag             | retValExp
        ==================+===================
          VOID            | ()
        ------------------+-------------------
          _               | <convertInterfaceToBase('retVal', retTypeInfo, SignalNamespace, false)>
        ------------------+-------------------


  paramName[i]
    is the <i>th element in the list of names of
    parameters of the signal as given by `GIRepository.BaseInfo.getName`.


  inParamNameJ[j]
    is defined as <paramName[J[j]]>, the <j>th element in the list of names
    of non-VOID IN/INOUT parameters of the signal.


  inParamNameL[l]
    is defined as <paramName[L[l]]>, the <l>th element in the list of names
    of non-VOID non-length IN/INOUT parameters of the signal.


  outParamNameK[k]
    is defined as <paramName[K[k]]>, the <k>th element in the list of names
    of non-VOID non-length INOUT/OUT parameters of the signal.


  outParamNameN[n]
    is defined as <paramName[N[n]]>, the <n>th element in the list of names
    of non-VOID INOUT/OUT parameters of the signal.


  outParamExpN[n]
    is defined as follows:

      argTypeInfo = GIRepository.ArgInfo.getType argInfo
      mayBeNull = GIRepository.ArgInfo.mayBeNull argInfo

      <paramLenExp(i, argTypeInfo, arrArgInfo, arrArgTypeInfo)>

        if there exists a unique i, arrArgInfo and arrArgTypeInfo such that
          arrArgInfo = GIRepository.CallableInfo.getArg functionInfo i
          arrArgTypeInfo = GIRepository.ArgInfo.getType arrArgInfo
          SOME <N[n]> = GIRepository.TypeInfo.getArrayLength arrArgTypeInfo
          i.e. the <n>th INOUT/OUT parameter is the length parameter for the
          array parameter with index <i>


      <paramNonLenExp(outParamNameN[n], argTypeInfo, mayBeNull)>

        otherwise, i.e. the <n>th INOUT/OUT parameter is not a length parameter


  inParamExpJ[j]
    is defined as follows:

      argTypeInfo = GIRepository.ArgInfo.getType argInfo
      mayBeNull = GIRepository.ArgInfo.mayBeNull argInfo

      <paramLenExp(i, argTypeInfo, arrArgInfo, arrArgTypeInfo)>

        if there exists a unique i, arrArgInfo and arrArgTypeInfo such that
          arrArgInfo = GIRepository.CallableInfo.getArg functionInfo i
          arrArgTypeInfo = GIRepository.ArgInfo.getType arrArgInfo
          SOME <J[j]> = GIRepository.TypeInfo.getArrayLength arrArgTypeInfo
          i.e. the <j>th IN/INOUT parameter is the length parameter for the
          array parameter with index <i>


      <paramNonLenExp(inParamNameJ[j], argTypeInfo, mayBeNull)>

        otherwise, i.e. the <j>th IN/INOUT parameter is not a length parameter


  paramNonLenExp(name, argTypeInfo, mayBeNull)
    is defined as follows:

      tag = GIRepository.TypeInfo.getTag argTypeInfo

      Conversion from tag is as follows:

        ERROR     --->    <name>
        FILENAME  --->    <name>
        ARRAY     --->    <paramArrayExp(name, argTypeInfo)>
        GLIST     --->    <raise Error "not supported">
        GSLIST    --->    <raise Error "not supported">
        GHASH     --->    <raise Error "not supported">
        VOID      --->    <raise Error "not expected">
        BOOLEAN   --->    <name>
        CHAR      --->    <name>
        UCHAR     --->    <name>
        INT       --->    <name>
        UINT      --->    <name>
        SHORT     --->    <name>
        USHORT    --->    <name>
        LONG      --->    <name>
        ULONG     --->    <name>
        INT8      --->    <name>
        UINT8     --->    <name>
        INT16     --->    <name>
        UINT16    --->    <name>
        INT32     --->    <name>
        UINT32    --->    <name>
        INT64     --->    <name>
        UINT64    --->    <name>
        FLOAT     --->    <name>
        DOUBLE    --->    <name>
        SSIZE     --->    <name>
        SIZE      --->    <name>
        OFFSET    --->    <raise Error "not supported">
        INTPTR    --->    <raise Error "not supported">
        UINTPTR   --->    <raise Error "not supported">
        UNICHAR   --->    <name>
        UTF8      --->    <name>
        INTERFACE --->    <convertInterfaceToBase(name, argTypeInfo, SignalNamespace, mayBeNull)>


  paramArrayExp(name, argTypeInfo)
    is defined as follows:

      arrayLength = GIRepository.TypeInfo.getArrayLength argTypeInfo

      Conversion from arrayLength is as follows:

        NONE                     --->     <name>
        SOME ZeroTerminated      --->     <name>
        SOME (LengthFixed n)     --->     <name>
        SOME (LengthParam i)     --->     (fn _ => <name>)


  paramLenExp(i, argTypeInfo, arrArgInfo, arrArgTypeInfo)
    is defined as follows:

      case <paramName[i]> of
        SOME <paramName[i]> => <lenParamSomeExp>
      | NONE                => <lenParamNoneExp>

        if GIRepository.ArgInfo.mayBeNull arrArgInfo


      <lenParamSomeExp>

        otherwise

    where

      lenParamSomeExp
        is defined as follows:

          tag = GIRepository.TypeInfo.getTag argTypeInfo

          Conversion from tag is as follows:

            ERROR     --->    <raise Error "not expected">
            FILENAME  --->    <raise Error "not expected">
            ARRAY     --->    <raise Error "not expected">
            GLIST     --->    <raise Error "not expected">
            GSLIST    --->    <raise Error "not expected">
            GHASH     --->    <raise Error "not expected">
            VOID      --->    <raise Error "not expected">
            BOOLEAN   --->    <raise Error "not expected">
            CHAR      --->    <raise Error "not expected">
            UCHAR     --->    <raise Error "not expected">
            INT       --->    <convertFromInt>
            UINT      --->    <convertFromInt>
            SHORT     --->    <convertFromInt>
            USHORT    --->    <convertFromInt>
            LONG      --->    <convertFromInt>
            ULONG     --->    <convertFromInt>
            INT8      --->    <convertFromInt>
            UINT8     --->    <convertFromInt>
            INT16     --->    <convertFromInt>
            UINT16    --->    <convertFromInt>
            INT32     --->    <convertFromInt>
            UINT32    --->    <convertFromInt>
            INT64     --->    <convertFromInt>
            UINT64    --->    <convertFromInt>
            FLOAT     --->    <raise Error "not expected">
            DOUBLE    --->    <raise Error "not expected">
            SSIZE     --->    <convertFromInt>
            SIZE      --->    <convertFromInt>
            OFFSET    --->    <raise Error "not supported">
            INTPTR    --->    <raise Error "not supported">
            UINTPTR   --->    <raise Error "not supported">
            UNICHAR   --->    <raise Error "not expected">
            UTF8      --->    <raise Error "not expected">
            INTERFACE --->    <raise Error "not expected">


          convertFromInt is defined as follows:

              scalarType(argTypeInfo) | convertFromInt
            ======================+===================================
              int                     | <lenIntExp>
            --------------------------+-----------------------------------
              LargeInt.int            | LargeInt.fromInt (<lenIntExp>)
            --------------------------+-----------------------------------
              Word8.word              | Word8.fromInt (<lenIntExp>)
            --------------------------+-----------------------------------

          lenIntExp is defined as follows:

              <ArrayStructId(arrArgTypeInfo)>.length <paramName[i]>


      lenParamNoneExp
        is defined as follows:

          tag = GIRepository.TypeInfo.getTag argTypeInfo

          Conversion from tag is as follows:

            ERROR     --->    <raise Error "not expected">
            FILENAME  --->    <raise Error "not expected">
            ARRAY     --->    <raise Error "not expected">
            GLIST     --->    <raise Error "not supported">
            GSLIST    --->    <raise Error "not supported">
            GHASH     --->    <raise Error "not supported">
            VOID      --->    <raise Error "not expected">
            BOOLEAN   --->    <raise Error "not expected">
            CHAR      --->    <raise Error "not expected">
            UCHAR     --->    <raise Error "not expected">
            INT       --->    GInt.null
            UINT      --->    GUInt.null
            SHORT     --->    GShort.null
            USHORT    --->    GUShort.null
            LONG      --->    GLong.null
            ULONG     --->    GULong.null
            INT8      --->    GInt8.null
            UINT8     --->    GUInt8.null
            INT16     --->    GInt16.null
            UINT16    --->    GUInt16.null
            INT32     --->    GInt32.null
            UINT32    --->    GUInt32.null
            INT64     --->    GInt64.null
            UINT64    --->    GUInt64.null
            FLOAT     --->    <raise Error "not expected">
            DOUBLE    --->    <raise Error "not expected">
            SSIZE     --->    GSSize.null
            SIZE      --->    GSize.null
            OFFSET    --->    <raise Error "not supported">
            INTPTR    --->    <raise Error "not supported">
            UINTPTR   --->    <raise Error "not supported">
            UTF8      --->    <raise Error "not expected">
            UNICHAR   --->    <raise Error "not expected">
            INTERFACE --->    <raise Error "not expected">


  retFun
    is the closure marshaller for the return value,
    translated according to the GIR type tag as follows:

        ERROR     --->    <raise Error "not expected">
        INT8      --->    <raise Error "no corresponding GType for INT8">
        UINT8     --->    <raise Error "no corresponding GType for UINT8">
        INT16     --->    <raise Error "no corresponding GType for INT16">
        UINT16    --->    <raise Error "no corresponding GType for UINT16">
        GTYPE     --->    <raise Error "not supported">
        FILENAME  --->    <raise Error "not supported">
        ARRAY     --->    <raise Error "not supported">
        GLIST     --->    <raise Error "not supported">
        GSLIST    --->    <raise Error "not supported">
        GHASH     --->    <raise Error "not supported">
        VOID      --->    retVoid
        BOOLEAN   --->    ret boolean
        INT32     --->    ret int32
        UINT32    --->    ret uint32
        INT64     --->    ret int64
        UINT64    --->    ret uint64
        FLOAT     --->    ret float
        DOUBLE    --->    ret double
        UTF8      --->    ret string
        UNICHAR   --->    ret char

        INTERFACE --->

          InterfaceName = GIBaseInfo.getName typeInfo
          InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

          infoType = GIInfoType.getType interfaceTypeInfo
          isClass = infoType is OBJECT _ | INTERFACE _
          isRecord = infoType is STRUCT _
          isUnion = infoType is UNION _
          isOther = not (isClass or isRecord or isUnion)

          isSelf = InterfaceName = ContainerName

            ret <InterfaceNamespace><InterfaceName>Class.t<RetOpt>
              if isClass


            ret <InterfaceNamespace><InterfaceName>Record.t<RetOpt>
              if isRecord


            ret <InterfaceNamespace><InterfaceName>.t<RetOpt>
              if not isSelf and isUnion

            ret t<RetOpt>
              if isSelf and isUnion


            ret <InterfaceNamespace><InterfaceName>.t<RetOpt>
              if not isSelf and isOther

            ret t<RetOpt>
              if isSelf and isOther


          RetOpt is defined as follows:

            mayReturnNull = GICallableInfo.mayReturnNull signalInfo

              mayReturnNull   | RetOpt
            ==================+===================
              false           | <empty>
            ------------------+-------------------
              true            | Opt
            ------------------+-------------------


  inParamFun[j]
    for j in 1 to J, is the closure marshaller for the
    <j>th parameter in the list of non-VOID IN/INOUT parameters,
    translated according to the GIR type tag as follows:

        ERROR     --->    <raise Error "not expected">
        INT8      --->    <raise Error "no corresponding GType for INT8">
        UINT8     --->    <raise Error "no corresponding GType for UINT8">
        INT16     --->    <raise Error "no corresponding GType for INT16">
        UINT16    --->    <raise Error "no corresponding GType for UINT16">
        GTYPE     --->    <raise Error "not supported">
        FILENAME  --->    <raise Error "not supported">
        ARRAY     --->    <inArrayParam[j]>
        GLIST     --->    <raise Error "not supported">
        GSLIST    --->    <raise Error "not supported">
        GHASH     --->    <raise Error "not supported">
        VOID      --->    <raise Fail "VOID">
        BOOLEAN   --->    parIn <J[j]> boolean
        INT32     --->    parIn <J[j]> int32
        UINT32    --->    parIn <J[j]> uint32
        INT64     --->    parIn <J[j]> int64
        UINT64    --->    parIn <J[j]> uint64
        FLOAT     --->    parIn <J[j]> float
        DOUBLE    --->    parIn <J[j]> double
        UTF8      --->    parIn <J[j]> string
        UNICHAR   --->    parIn <J[j]> char

        INTERFACE --->

          InterfaceName = GIBaseInfo.getName typeInfo
          InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

          infoType = GIInfoType.getType interfaceTypeInfo
          isClass = infoType is OBJECT _ | INTERFACE _
          isRecord = infoType is STRUCT _
          isUnion = infoType is UNION _
          isOther = not (isClass or isRecord or isUnion)

          isSelf = InterfaceName = ContainerName

            parIn <J[j]> <InterfaceNamespace><InterfaceName>Class.t<InOpt>
              if isClass


            parIn <J[j]> <InterfaceNamespace><InterfaceName>Record.t<InOpt>
              if isRecord


            parIn <J[j]> <InterfaceNamespace><InterfaceName>.t<InOpt>
              if  not isSelf and isUnion

            parIn <J[j]> t<InOpt>
              if isSelf and isUnion


            parIn <J[j]> <InterfaceNamespace><InterfaceName>.t<InOpt>
              if  not isSelf and isOther

            parIn <J[j]> t<InOpt>
              if isSelf and isOther


          InOpt is defined as follows:

            mayBeNull   = GIArgInfo.mayBeNull argInfo

              mayBeNull       | InOpt
            ==================+===================
              false           | <empty>
            ------------------+-------------------
              true            | Opt
            ------------------+-------------------


  inArrayParam[j]
    is defined as follows:

        ownershipTransfer = GIRepository.ArgInfo.getOwnershipTransfer argInfo
        argTypeInfo       = GIRepository.ArgInfo.getType argInfo
        mayBeNull         = GIRepository.ArgInfo.mayBeNull argInfo

          ownershipTra... | inArrayParam[j]
        ==================+===============================================
          NOTHING         | parIn <J[j]> <A>.t<Opt>
        ------------------+-----------------------------------------------
          CONTAINER       | <raise Error "not supported">
        ------------------+-----------------------------------------------
          EVERYTHING      | <raise Error "not supported">
        ------------------+-----------------------------------------------

    where

      A is <ArrayStructId(argTypeInfo)>.FFI

      Opt is defined as follows:

          mayBeNull       | Opt
        ==================+===================
          false           | <empty>
        ------------------+-------------------
          true            | Opt
        ------------------+-------------------


  outParamFun[n]
    for n in 1 to N, is the closure marshaller for the
    <n>th parameter in the list of non-VOID INOUT/OUT parameters,
    translated according to the GIR type tag as follows:

        ERROR     --->    <raise Error "not expected">
        INT8      --->    <raise Error "no corresponding GType for INT8">
        UINT8     --->    <raise Error "no corresponding GType for UINT8">
        INT16     --->    <raise Error "no corresponding GType for INT16">
        UINT16    --->    <raise Error "no corresponding GType for UINT16">
        GTYPE     --->    <raise Error "not supported">
        FILENAME  --->    <raise Error "not supported">
        ARRAY     --->    <raise Error "not supported">
        GLIST     --->    <raise Error "not supported">
        GSLIST    --->    <raise Error "not supported">
        GHASH     --->    <raise Error "not supported">
        VOID      --->    <raise Fail "VOID">
        BOOLEAN   --->    parOut <N[n]> boolean
        INT32     --->    parOut <N[n]> int32
        UINT32    --->    parOut <N[n]> uint32
        INT64     --->    parOut <N[n]> int64
        UINT64    --->    parOut <N[n]> uint64
        FLOAT     --->    parOut <N[n]> float
        DOUBLE    --->    parOut <N[n]> double
        UTF8      --->    parOut <N[n]> string
        UNICHAR   --->    parOut <N[n]> char

        INTERFACE --->

          InterfaceName = GIBaseInfo.getName typeInfo
          InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

          infoType = GIInfoType.getType interfaceTypeInfo
          isClass = infoType is OBJECT _ | INTERFACE _
          isRecord = infoType is STRUCT _
          isUnion = infoType is UNION _
          isOther = not (isClass or isRecord or isUnion)

          isSelf = InterfaceName = ContainerName

            parOut <N[n]> <InterfaceNamespace><InterfaceName>Class.t<OutOpt>
              if isClass


            parOut <N[n]> <InterfaceNamespace><InterfaceName>Record.t<OutOpt>
              if isRecord


            parOut <N[n]> <InterfaceNamespace><InterfaceName>.t<OutOpt>
              if not isSelf and isUnion

            parOut <N[n]> t<OutOpt>
              if isSelf and isUnion


            parOut <N[n]> <InterfaceNamespace><InterfaceName>.t<OutOpt>
              if not isSelf and isOther

            parOut <N[n]> t<OutOpt>
              if isSelf and isOther


          OutOpt is defined as follows:

            mayBeNull   = GIArgInfo.mayBeNull argInfo

              mayBeNull       | InOpt
            ==================+===================
              false           | <empty>
            ------------------+-------------------
              true            | Opt
            ------------------+-------------------

