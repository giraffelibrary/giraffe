<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="ug-signals">
<info>
  <title type="sort">0600</title>
  <link type="guide" xref="ug-index#sml-interface"/>
</info>
<title>Signals</title>
<p>
A signal is defined by a class or interface
and is emitted by an object (instance) when a particular event occurs.
A function is called on emission of a signal by connecting to the signal
and specifying the function as the handler.
</p>
<p>
The special structure <code type="sml"><link xref="ug-special-structures#signal">Signal</link></code>
provides support for working with signals in a type safe way.
</p>

<section>
<title>Referring to signals</title>
<p>
In GObject, a signal name is string of ASCII letters and digits with words separated by a hyphen (or underscore)
where the first word starts with a letter.
The SML interface provides an abstract value for each signal.
For a signal “<var>some</var>-<var>signal</var>-<var>name</var>”
of a class or interface <var>Type</var> in a namespace <var>Namespace</var>,
the hierarchical SML name is
<code type="sml"><var>Namespace</var>.<var>Type</var>.<var>someSignalName</var>Sig</code>.
</p>
<example>
<p>
For example, the signal “insert-at-cursor”
of the class TextView in the namespace Gtk is
<code type="sml">Gtk.TextView.insertAtCursorSig</code>
</p>
</example>
<p>
In order to provide a type-safe interface for using signals,
each signal has an SML specification constraining the instance type that emits
the signal and the type of the emitter and handler functions.
</p>
<p>
The specification of <code type="sml"><var>Namespace</var>.<var>Type</var>.<var>someSignalName</var>Sig</code>
in the signature <code type="sml"><var>NAMESPACE</var>_<var>TYPE</var></code>
has the form:
</p>
<code type="sml">
val <var>some</var><var>Signal</var><var>Name</var>Sig : (<var>instanceType</var>, <var>argType_e</var>, <var>argType_h</var>, <var>resType_h</var>, <var>resType_e</var>) Signal.t
</code>
<p>
where
</p>
<terms>
<item>
  <title><code type="sml"><var>instanceType</var></code></title>
  <p>
    is:
  </p>
  <list>
    <item><p><code type="sml">'a class</code> for a class, which allows an instance of the class or any subclass of the class;</p></item>
    <item><p><code type="sml">t</code> for an interface;</p></item>
  </list>
</item>
<item>
  <title><code type="sml"><var>argType_e</var> -> <var>resType_e</var></code></title>
  <p>
    is the type of a function that emits the signal;
  </p>
</item>
<item>
  <title><code type="sml"><var>instanceType</var> -> <var>argType_h</var> -> <var>resType_h</var></code></title>
  <p>
    is the type of a function that handles the signal;
  </p>
</item>
<item>
  <title><code type="sml"><var>argType_e</var></code> and <code type="sml"><var>argType_h</var></code></title>
  <p>
    contain the types of the &#x2018;in&#x2019; and &#x2018;inout&#x2019; arguments,
    as a tuple if there are two or more and as <code type="sml">unit</code> if there are none;
  </p>
</item>
<item>
  <title><code type="sml"><var>resType_e</var></code> and <code type="sml"><var>resType_h</var></code></title>
  <p>
    contain the following types as a tuple if there are two or more and as <code type="sml">unit</code> if there are none:
  </p>
  <list>
  <item>
    <p>
      the types of the &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments, if the return type is void;
    </p>
  </item>
  <item>
    <p>
      the return type followed by the types of the &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments, if the return type is not void.
    </p>
  </item>
  </list>
</item>
</terms>
<p>
The difference between <code type="sml"><var>argType_e</var></code> and <code type="sml"><var>argType_h</var></code> and
between <code type="sml"><var>resType_e</var></code> and <code type="sml"><var>resType_h</var></code>
is in the SML types for a class or union:
<code type="sml"><var>argType_e</var></code> and <code type="sml"><var>resType_h</var></code> allow
an object of any subclass of the class and
a union instance to have the type of any field of the union
whereas <code type="sml"><var>resType_e</var></code> and <code type="sml"><var>argType_h</var></code> do not.
</p>
<example>
<p>
For example, the specification of <code type="sml">Gtk.TextView.insertAtCursorSig</code> is
</p>
<code type="sml">
val insertAtCursorSig : ('a class, string, string, unit, unit) Signal.t
</code>
</example>
<p>
As the example above shows,
neither <code type="sml"><var>argType_e</var></code> nor <code type="sml"><var>argType_h</var></code>
have an argument
for the instance that emits the signal.
</p>
</section>

<section>
<title>Specifying signal detail</title>

<p>
In GObject, the detail of a signal is a string whose format is specific to the signal.
The SML representation of a signal includes the detail,
which is used by both signal connection and emission functions.
The detail of a signal value is returned by the function <code type="sml">Signal.detail</code>
and is overridden by the functions <code type="sml">Signal.withDetail</code> and <code type="sml">Signal.withPropDetail</code>
which return a new signal value.
</p>
<p>
The detail of a signal <code type="sml"><var>signal</var></code> is given by
</p>
<code type="sml">
Signal.detail <var>signal</var>
</code>
<p>
The detail of each signal provided in the SML interface is empty:
for a signal “<var>a</var>”
of a class or interface <var>Namespace</var>.<var>Type</var>,
<code type="sml">
Signal.detail <var>Namespace</var>.<var>Type</var>.<var>a</var>Sig
</code>
is <code type="sml">""</code>.
</p>
<p>
A signal <code type="sml"><var>signal</var></code>
with the detail replaced by <code type="sml"><var>detail</var></code> is given by
</p>
<code type="sml">
Signal.withDetail (<var>signal</var>, <var>detail</var>)
</code>
<p>
Specifying <code type="sml"><var>detail</var></code> as <code type="sml">""</code> has the effect of removing any detail.
</p>
<p>
The detail of the signal “notify” of the class GObject.Object requires a property name if non-empty.
Using <code type="sml">Signal.withDetail</code> to override this detail requires the property name to be written as a string.
Instead, this detail can be overridden by specifying a property value using <code type="sml">Signal.withPropDetail</code>.
A signal <code type="sml"><var>signal</var></code>
with the detail replaced by the name of a property <code type="sml"><var>prop</var></code> and
with its type constrained for use only on instances with the property is given by
</p>
<code type="sml">
Signal.withPropDetail (<var>signal</var>, <var>prop</var>)
</code>
<p>
<code type="sml">Signal.withPropDetail</code> is preferable for a signal whose detail is a property name
because type checking also ensures that:
</p>
<list style="compact">
<item><p>the property exists;</p></item>
<item><p>the property is valid for the object on which the signal is defined;</p></item>
<item><p>the resulting signal cannot be used on an object that does not have the property.</p></item>
</list>
</section>

<section>
<title>Handling signals</title>

<note style="tip">
<p>
At present, there is support only for handling the emission of a signal from an instance of a class or interface.
There is no support for
</p>
<list style="compact">
<item><p>handling a signal on all instances of a class or interface, i.e. overriding the class closure</p></item>
<item><p>emission hooks</p></item>
</list>
</note>

<section>
<title>Connecting signal handlers</title>
<p>
A handler function is connected to a signal of an object (instance)
using <code type="sml">Signal.connect</code> or <code type="sml">Signal.connectAfter</code>.
The handler function is called
<em>before</em> the default handler by using <code type="sml">Signal.connect</code> and
<em>after</em> the default handler by using <code type="sml">Signal.connectAfter</code>.
</p>
<p>
For a signal “<var>a</var>”
of a class <var>Class</var> in a namespace <var>ClassNamespace</var>,
a handler function <code type="sml"><var>f</var></code>
is connected to the signal on an object <code type="sml"><var>obj</var></code> by
</p>
<code type="sml">
Signal.connect <var>obj</var> (<var>ClassNamespace</var>.<var>Class</var>.<var>a</var>Sig, <var>f</var>)
</code>
<p>
whose value is a handler id to allow the signal connection to be modified or checked subsequently.
</p>
<p>
For a signal “<var>a</var>”
of an interface <var>IfaceNamespace</var>.<var>Iface</var>
implemented by the class <var>ClassNamespace</var>.<var>Class</var>,
a handler function <code type="sml"><var>f</var></code>
is connected to the signal on the object <code type="sml"><var>obj</var></code> by
either converting <code type="sml"><var>obj</var></code>:
</p>
<code type="sml">
Signal.connect (<var>ClassNamespace</var>.<var>Class</var>.as<var>Iface</var> <var>obj</var>) (<var>IfaceNamespace</var>.<var>Iface</var>.<var>a</var>Sig, <var>f</var>)
</code>
<p>or converting the signal:</p>
<code type="sml">
Signal.connect <var>obj</var> (Signal.conv <var>ClassNamespace</var>.<var>Class</var>.as<var>Iface</var> <var>IfaceNamespace</var>.<var>Iface</var>.<var>a</var>Sig, <var>f</var>)
</code>
<example>
<p>
For example, to handle emission of the signal “insert-at-cursor”
from the object <code type="sml">textView</code>
using the function <code type="sml">onInsert</code>, connect to the signal as follows:
</p>
<code type="sml">
val handlerId = Signal.connect textView (Gtk.TextView.insertAtCursorSig, onInsert)
</code>
<p>
<code type="sml">handlerId</code> can be used to modify this signal connection subsequently.
</p>
</example>
<p>
When the handler function <code type="sml"><var>f</var></code> needs to refer to the object that emitted the signal, <code type="sml"><var>obj</var></code>,
it is preferable to use its first argument (which is always <code type="sml"><var>obj</var></code>) rather than referencing <code type="sml"><var>obj</var></code> directly.
If the handler function <code type="sml"><var>f</var></code> references <code type="sml"><var>obj</var></code>, <code type="sml"><var>obj</var></code> cannot be destroyed until the handler is explicitly disconnected.
If the handler function <code type="sml"><var>f</var></code> uses its first argument then it will hold a reference to <code type="sml"><var>obj</var></code> only temporarily each time <code type="sml"><var>f</var></code> is called (provided <code type="sml"><var>f</var></code> does not store its first argument anywhere).
</p>
<code type="sml">
Signal.connect <var>obj</var> (<var>Namespace</var>.<var>Type</var>.<var>a</var>Sig, <var>f</var> <var>obj</var>)
</code>
<p>
Type checking ensures that when a handler is connected to a signal of an object,
</p>
<list style="compact">
<item><p>the handler function has the correct type for the signal;</p></item>
<item><p>the signal is valid for the object.</p></item>
</list>

</section>

<section>
<title>Blocking signal handlers</title>
<p>
A signal handler is blocked using <code type="sml">Signal.handlerBlock</code>
and unblocked using <code type="sml">Signal.handlerUnblock</code>.
(Note that blocking is cumulative so a signal handler becomes active
only once it has been unblocked as many times as it has been blocked.)
The signal handler to block or unblock is identified by the object that emits the signal and
the handler id returned when it was connected.
</p>
<example>
<p>
For example, a signal handler on <code type="sml">textView</code> identified by <code type="sml">handlerId</code>
is blocked as follows:
</p>
<code type="sml">
Signal.handlerBlock textView handlerId
</code>
<p>
and is unblocked as follows:
</p>
<code type="sml">
Signal.handlerUnblock textView handlerId
</code>
</example>
</section>

<section>
<title>Disconnecting signal handlers</title>
<p>
A signal handler is disconnected using <code type="sml">Signal.handlerDisconnect</code>.
The signal handler to disconnect is identified by the object that emits the signal and
the handler id returned when it was connected.
</p>
<example>
<p>
For example, a signal handler on <code type="sml">textView</code> identified by <code type="sml">handlerId</code>
is disconnected as follows:
</p>
<code type="sml">
Signal.handlerDisconnect textView handlerId
</code>
</example>
</section>

<section>
<title>Testing whether signal handlers are still connected</title>
<p>
<code type="sml">Signal.handlerIsConnected</code> tests whether a signal is connected.
The signal handler is identified by the object that emits the signal and
the handler id returned when it was connected.
</p>
<example>
<p>
For example, a signal handler on <code type="sml">textView</code> identified by <code type="sml">handlerId</code>
is tested as follows:
</p>
<code type="sml">
Signal.handlerIsConnected textView handlerId
</code>
</example>
</section>

</section>

<section>
<title>Emitting signals</title>
<p>
A signal is emitted on an object (instance)
using <code type="sml">Signal.emit</code>.
</p>
<p>
For a signal “<var>a</var>”
of a class <var>ClassNamespace</var>.<var>Class</var>,
the signal is emitted on an object <code type="sml"><var>obj</var></code> with an argument <code type="sml"><var>arg</var></code> by
</p>
<code type="sml">
Signal.emit <var>obj</var> <var>ClassNamespace</var>.<var>Class</var>.<var>a</var>Sig <var>arg</var>
</code>
<p>
whose value is the result.
</p>
<note style="tip">
<p>
Not all signals have a default handler.
If emission of a signal is not handled,
the result contains
</p>
<list style="compact">
<item><p>the default value for &#x2018;out&#x2019; arguments and the return value and</p></item>
<item><p>the before value for &#x2018;inout&#x2019; arguments.</p></item>
</list>
<p>
The default value is the value set on initialization of a <code type="c">GValue</code>
by <code type="c"><link href="https://developer-old.gnome.org/gobject/stable/gobject-Generic-values.html#g-value-init">g_value_init</link></code>
for the <code type="c">GType</code> of the corresponding &#x2018;out&#x2019; argument or return value.
</p>
</note>
<p>
For a signal “<var>a</var>”
of an interface <var>IfaceNamespace</var>.<var>Iface</var>
implemented by the class <var>ClassNamespace</var>.<var>Class</var>,
the signal is emitted on an object <code type="sml"><var>obj</var></code> with an argument <code type="sml"><var>arg</var></code> by
either converting <code type="sml"><var>obj</var></code>:
</p>
<code type="sml">
Signal.emit (<var>ClassNamespace</var>.<var>Class</var>.as<var>Iface</var> <var>obj</var>) <var>IfaceNamespace</var>.<var>Iface</var>.<var>a</var>Sig <var>arg</var>
</code>
<p>or converting the signal:</p>
<code type="sml">
Signal.emit <var>obj</var> (Signal.conv <var>ClassNamespace</var>.<var>Class</var>.as<var>Iface</var> <var>IfaceNamespace</var>.<var>Iface</var>.<var>a</var>Sig) <var>arg</var>
</code>
<example>
<p>
For example, to emit the signal “button-press-event”
on the object <code type="sml">button</code>
with the argument <code type="sml">e</code>, emit the signal as follows:
</p>
<code type="sml">
val res = Signal.emit button Widget.buttonPressEventSig e
</code>
</example>
<p>
Type checking ensures that when a signal is emitted on an object,
</p>
<list style="compact">
<item><p>the emit function has the correct type for the signal;</p></item>
<item><p>the signal is valid for the object.</p></item>
</list>
</section>

</page>
